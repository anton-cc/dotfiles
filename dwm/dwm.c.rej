--- dwm.c
+++ dwm.c
@@ -175,6 +196,7 @@ static long getstate(Window w);
 static int gettextprop(Window w, Atom atom, char *text, unsigned int size);
 static void grabbuttons(Client *c, int focused);
 static void grabkeys(void);
+static void incnmaster(const Arg *arg);
 static void keypress(XEvent *e);
 static void killclient(const Arg *arg);
 static void manage(Window w, XWindowAttributes *wa);
@@ -630,32 +652,17 @@ configurerequest(XEvent *e)
 Monitor *
 createmon(void)
 {
-	unsigned int i;
 	Monitor *m;
 
 	m = ecalloc(1, sizeof(Monitor));
 	m->tagset[0] = m->tagset[1] = 1;
 	m->mfact = mfact;
+	m->nmaster = nmaster;
 	m->showbar = showbar;
 	m->topbar = topbar;
 	m->lt[0] = &layouts[0];
 	m->lt[1] = &layouts[1 % LENGTH(layouts)];
 	strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
-	m->ltaxis[0] = layoutaxis[0];
-	m->ltaxis[1] = layoutaxis[1];
-	m->ltaxis[2] = layoutaxis[2];
-	m->msplit = 1;
-	/* init tags, bars, layouts, axes, msplits and mfacts */
-	m->curtag = m->prevtag = 1;
-	for(i = 0; i < LENGTH(tags) + 1; i++){
-		m->showbars[i] = m->showbar;
-		m->lts[i] = &layouts[0];
-		m->mfacts[i] = m->mfact;
-		m->ltaxes[i][0] = m->ltaxis[0];
-		m->ltaxes[i][1] = m->ltaxis[1];
-		m->ltaxes[i][2] = m->ltaxis[2];
-		m->msplits[i] = m->msplit;
-	}
 	return m;
 }
 
@@ -1518,7 +1532,7 @@ setlayout(const Arg *arg)
 	if (!arg || !arg->v || arg->v != selmon->lt[selmon->sellt])
 		selmon->sellt ^= 1;
 	if (arg && arg->v)
-		selmon->lt[selmon->sellt] = selmon->lts[selmon->curtag] = (Layout *)arg->v;
+		selmon->lt[selmon->sellt] = (Layout *)arg->v;
 	strncpy(selmon->ltsymbol, selmon->lt[selmon->sellt]->symbol, sizeof selmon->ltsymbol);
 	if (selmon->sel)
 		arrange(selmon);
@@ -1537,7 +1551,7 @@ setmfact(const Arg *arg)
 	f = arg->f < 1.0 ? arg->f + selmon->mfact : arg->f - 1.0;
 	if (f < 0.05 || f > 0.95)
 		return;
-	selmon->mfact = selmon->mfacts[selmon->curtag] = f;
+	selmon->mfact = f;
 	arrange(selmon);
 }
 
@@ -1685,10 +1699,38 @@ tagmon(const Arg *arg)
 	sendmon(selmon->sel, dirtomon(arg->i));
 }
 
+void
+tile(Monitor *m)
+{
+	unsigned int i, n, h, mw, my, ty;
+	Client *c;
+
+	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+	if (n == 0)
+		return;
+
+	if (n > m->nmaster)
+		mw = m->nmaster ? m->ww * m->mfact : 0;
+	else
+		mw = m->ww;
+	for (i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
+		if (i < m->nmaster) {
+			h = (m->wh - my) / (MIN(n, m->nmaster) - i);
+			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), 0);
+			if (my + HEIGHT(c) < m->wh)
+				my += HEIGHT(c);
+		} else {
+			h = (m->wh - ty) / (n - i);
+			resize(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw), 0);
+			if (ty + HEIGHT(c) < m->wh)
+				ty += HEIGHT(c);
+		}
+}
+
 void
 togglebar(const Arg *arg)
 {
-	selmon->showbar = selmon->showbars[selmon->curtag] = !selmon->showbar;
+	selmon->showbar = !selmon->showbar;
 	updatebarpos(selmon);
 	XMoveResizeWindow(dpy, selmon->barwin, selmon->wx, selmon->by, selmon->ww, bh);
 	arrange(selmon);
@@ -1712,31 +1754,12 @@ void
 toggletag(const Arg *arg)
 {
 	unsigned int newtags;
-	unsigned int i;
 
 	if (!selmon->sel)
 		return;
 	newtags = selmon->sel->tags ^ (arg->ui & TAGMASK);
 	if (newtags) {
 		selmon->sel->tags = newtags;
-		if(newtags == ~0) {
-			selmon->prevtag = selmon->curtag;
-			selmon->curtag = 0;
-		}
-		if(!(newtags & 1 << (selmon->curtag - 1))) {
-			selmon->prevtag = selmon->curtag;
-			for (i=0; !(newtags & 1 << i); i++);
-			selmon->curtag = i + 1;
-		}
-		selmon->sel->tags = newtags;
-		selmon->lt[selmon->sellt] = selmon->lts[selmon->curtag];
-		selmon->mfact = selmon->mfacts[selmon->curtag];
-		if (selmon->showbar != selmon->showbars[selmon->curtag])
-			togglebar(NULL);
-		selmon->ltaxis[0] = selmon->ltaxes[selmon->curtag][0];
-		selmon->ltaxis[1] = selmon->ltaxes[selmon->curtag][1];
-		selmon->ltaxis[2] = selmon->ltaxes[selmon->curtag][2];
-		selmon->msplit = selmon->msplits[selmon->curtag];
 		focus(NULL);
 		arrange(selmon);
 	}
@@ -2043,33 +2066,11 @@ updatewmhints(Client *c)
 void
 view(const Arg *arg)
 {
-	unsigned int i;
-
 	if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
 		return;
 	selmon->seltags ^= 1; /* toggle sel tagset */
-	if (arg->ui & TAGMASK) {
+	if (arg->ui & TAGMASK)
 		selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
-		selmon->prevtag = selmon->curtag;
-		if(arg->ui == ~0)
-			selmon->curtag = 0;
-		else {
-			for (i=0; !(arg->ui & 1 << i); i++);
-			selmon->curtag = i + 1;
-		}
-	} else {
-		selmon->prevtag = selmon->curtag ^ selmon->prevtag;
-		selmon->curtag ^= selmon->prevtag;
-		selmon->prevtag = selmon->curtag ^ selmon->prevtag;
-	}
-	selmon->lt[selmon->sellt] = selmon->lts[selmon->curtag];
-	selmon->mfact = selmon->mfacts[selmon->curtag];
-	if(selmon->showbar != selmon->showbars[selmon->curtag])
-		togglebar(NULL);
-	selmon->ltaxis[0] = selmon->ltaxes[selmon->curtag][0];
-	selmon->ltaxis[1] = selmon->ltaxes[selmon->curtag][1];
-	selmon->ltaxis[2] = selmon->ltaxes[selmon->curtag][2];
-	selmon->msplit = selmon->msplits[selmon->curtag];
 	focus(NULL);
 	arrange(selmon);
 }
